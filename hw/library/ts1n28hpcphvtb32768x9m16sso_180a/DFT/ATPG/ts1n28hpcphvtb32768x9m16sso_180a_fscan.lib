//*#*********************************************************************************************************************/
//*# Software       : TSMC MEMORY COMPILER tsn28hpcpd127spsram_2012.02.00.d.180a						*/
//*# Technology     : TSMC 28nm CMOS LOGIC High Performance Compact Mobile Computing Plus 1P10M HKMG CU_ELK 0.9V				*/
//*#  Memory Type    : TSMC 28nm High Performance Compact Mobile Computing Plus Single Port SRAM with d127 bit cell HVT periphery */
//*# Library Name   : ts1n28hpcphvtb32768x9m16sso (user specify : TS1N28HPCPHVTB32768X9M16SSO)				*/
//*# Library Version: 180a												*/
//*# Generated Time : 2024/05/10, 14:04:29										*/
//*#*********************************************************************************************************************/
//*#															*/
//*# STATEMENT OF USE													*/
//*#															*/
//*# This information contains confidential and proprietary information of TSMC.					*/
//*# No part of this information may be reproduced, transmitted, transcribed,						*/
//*# stored in a retrieval system, or translated into any human or computer						*/
//*# language, in any form or by any means, electronic, mechanical, magnetic,						*/
//*# optical, chemical, manual, or otherwise, without the prior written permission					*/
//*# of TSMC. This information was prepared for informational purpose and is for					*/
//*# use by TSMC's customers only. TSMC reserves the right to make changes in the					*/
//*# information at any time and without notice.									*/
//*#															*/
//*#*********************************************************************************************************************/
//* Template Version : S_04_41401                                               */
//****************************************************************************** */
array_delimiter = "[]";

model TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit(SD_i, SLP_i, AWT_i, CLK_i, CEB_i, WEB_i, BWEB_i, A_i, D_i, Q_i)
(
  model_source = verilog_module;
  input (SD_i) ( )
  input (SLP_i) ( )
  input (AWT_i) ( )
  input (CLK_i) ( )
  input (CEB_i) ( )
  input (WEB_i) ( )
  input (BWEB_i) ( )
  input (D_i) ( )
  input (A_i) (array = 14 : 0;)
  intern (WB) ( primitive = _nor ( WEB_i, CEB_i, BWEB_i, SD_i, SLP_i, WB );)
  intern (RB) (
    primitive = _inv ( WEB_i, WEB_n );
    primitive = _nor ( WEB_n, CEB_i, SD_i, SLP_i, AWT_i, RB );
  )
  output (Q_i) (  
    data_size = 1;
    address_size = 15;
    min_address = 0;
    max_address = 32767;
    edge_trigger = rw; //  EDGE TRIGGERED read ports and write ports
    
    // Verilog RAM has no Set or Reset pin : 
    primitive = _cram ( , ,
      // Following write port will Hold in-memory data when not writing.
      _write{,,}     (   CLK_i, WB, A_i, D_i),
      // Following read port will Hold output data after reading.
      _read {,H,H,H} ( , CLK_i, RB, A_i, Q_i)
    );    
  )
)


model TS1N28HPCPHVTB32768X9M16SSO (
            SLP,
            SD,
            CLK, CEB, WEB,
            A, D, 
            Q
            )

(
  model_source = verilog_module;
  input (CLK) ()
  input (WEB) ()
  input (CEB) ()      
  input (SLP)   ()
  input (SD) ()
  intern (AWT) ( primitive = _tie0 ( AWT );)
  intern (bist_x)  (primitive = _tie1(bist_x);)
  intern (Q_tiex)  (primitive = _tiex(Q_tiex);)
  intern (WEBM) ( primitive = _buf ( WEB, WEBM );)
  intern (CEBM) ( primitive = _buf ( CEB, CEBM );)      
  intern (BIST) ( primitive = _tie0 ( BIST );)      
  intern (mlc_tiex) ( primitive = _tiex ( mlc_tiex );)
  intern (power_down) ( primitive = _or ( SD, SLP, power_down );)
  intern (iCEB) ( primitive = _mux ( CEB, CEBM, BIST, iCEB );)
  intern (iWEB) ( primitive = _mux ( WEB, WEBM, BIST, iWEB );)
  intern (iBWEB) (array = 8 : 0;
    primitive = _mux ( BWEB[0], BWEBM[0], BIST, iBWEB[0] );
    primitive = _mux ( BWEB[1], BWEBM[1], BIST, iBWEB[1] );
    primitive = _mux ( BWEB[2], BWEBM[2], BIST, iBWEB[2] );
    primitive = _mux ( BWEB[3], BWEBM[3], BIST, iBWEB[3] );
    primitive = _mux ( BWEB[4], BWEBM[4], BIST, iBWEB[4] );
    primitive = _mux ( BWEB[5], BWEBM[5], BIST, iBWEB[5] );
    primitive = _mux ( BWEB[6], BWEBM[6], BIST, iBWEB[6] );
    primitive = _mux ( BWEB[7], BWEBM[7], BIST, iBWEB[7] );
    primitive = _mux ( BWEB[8], BWEBM[8], BIST, iBWEB[8] );
  )
  intern (iD) (array = 8 : 0;
    primitive = _mux ( D[0], DM[0], BIST, iD[0] );
    primitive = _mux ( D[1], DM[1], BIST, iD[1] );
    primitive = _mux ( D[2], DM[2], BIST, iD[2] );
    primitive = _mux ( D[3], DM[3], BIST, iD[3] );
    primitive = _mux ( D[4], DM[4], BIST, iD[4] );
    primitive = _mux ( D[5], DM[5], BIST, iD[5] );
    primitive = _mux ( D[6], DM[6], BIST, iD[6] );
    primitive = _mux ( D[7], DM[7], BIST, iD[7] );
    primitive = _mux ( D[8], DM[8], BIST, iD[8] );
  )
  intern (iA) (array = 14 : 0;
    primitive = _mux ( A[0], AM[0], BIST, iA[0] );
    primitive = _mux ( A[1], AM[1], BIST, iA[1] );
    primitive = _mux ( A[2], AM[2], BIST, iA[2] );
    primitive = _mux ( A[3], AM[3], BIST, iA[3] );
    primitive = _mux ( A[4], AM[4], BIST, iA[4] );
    primitive = _mux ( A[5], AM[5], BIST, iA[5] );
    primitive = _mux ( A[6], AM[6], BIST, iA[6] );
    primitive = _mux ( A[7], AM[7], BIST, iA[7] );
    primitive = _mux ( A[8], AM[8], BIST, iA[8] );
    primitive = _mux ( A[9], AM[9], BIST, iA[9] );
    primitive = _mux ( A[10], AM[10], BIST, iA[10] );
    primitive = _mux ( A[11], AM[11], BIST, iA[11] );
    primitive = _mux ( A[12], AM[12], BIST, iA[12] );
    primitive = _mux ( A[13], AM[13], BIST, iA[13] );
    primitive = _mux ( A[14], AM[14], BIST, iA[14] );
  )
  intern (Q_awt) (array = 8 : 0;
    primitive = _xor ( iD[0], iBWEB[0], Q_awt[0] );    
    primitive = _xor ( iD[1], iBWEB[1], Q_awt[1] );    
    primitive = _xor ( iD[2], iBWEB[2], Q_awt[2] );    
    primitive = _xor ( iD[3], iBWEB[3], Q_awt[3] );    
    primitive = _xor ( iD[4], iBWEB[4], Q_awt[4] );    
    primitive = _xor ( iD[5], iBWEB[5], Q_awt[5] );    
    primitive = _xor ( iD[6], iBWEB[6], Q_awt[6] );    
    primitive = _xor ( iD[7], iBWEB[7], Q_awt[7] );    
    primitive = _xor ( iD[8], iBWEB[8], Q_awt[8] );    
  )
  intern (Q_int) (array = 8 : 0;
    primitive = _mux ( Q_1bit[0], Q_awt[0], AWT, Q_int[0] );
    primitive = _mux ( Q_1bit[1], Q_awt[1], AWT, Q_int[1] );
    primitive = _mux ( Q_1bit[2], Q_awt[2], AWT, Q_int[2] );
    primitive = _mux ( Q_1bit[3], Q_awt[3], AWT, Q_int[3] );
    primitive = _mux ( Q_1bit[4], Q_awt[4], AWT, Q_int[4] );
    primitive = _mux ( Q_1bit[5], Q_awt[5], AWT, Q_int[5] );
    primitive = _mux ( Q_1bit[6], Q_awt[6], AWT, Q_int[6] );
    primitive = _mux ( Q_1bit[7], Q_awt[7], AWT, Q_int[7] );
    primitive = _mux ( Q_1bit[8], Q_awt[8], AWT, Q_int[8] );
  )
  intern (Q_1bit) (array = 8 : 0;
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[0]), .A_i(iA), .D_i(iD[0]), .Q_i(Q_1bit[0])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[1]), .A_i(iA), .D_i(iD[1]), .Q_i(Q_1bit[1])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[2]), .A_i(iA), .D_i(iD[2]), .Q_i(Q_1bit[2])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[3]), .A_i(iA), .D_i(iD[3]), .Q_i(Q_1bit[3])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[4]), .A_i(iA), .D_i(iD[4]), .Q_i(Q_1bit[4])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[5]), .A_i(iA), .D_i(iD[5]), .Q_i(Q_1bit[5])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[6]), .A_i(iA), .D_i(iD[6]), .Q_i(Q_1bit[6])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[7]), .A_i(iA), .D_i(iD[7]), .Q_i(Q_1bit[7])
    );
    instance = TS1N28HPCPHVTB32768X9M16SSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[8]), .A_i(iA), .D_i(iD[8]), .Q_i(Q_1bit[8])
    );
  )
    intern (Q_bistx0) (primitive = _mux(Q_tiex, Q_int[0], bist_x, Q_bistx0);)
    intern (Q_bistx1) (primitive = _mux(Q_tiex, Q_int[1], bist_x, Q_bistx1);)
    intern (Q_bistx2) (primitive = _mux(Q_tiex, Q_int[2], bist_x, Q_bistx2);)
    intern (Q_bistx3) (primitive = _mux(Q_tiex, Q_int[3], bist_x, Q_bistx3);)
    intern (Q_bistx4) (primitive = _mux(Q_tiex, Q_int[4], bist_x, Q_bistx4);)
    intern (Q_bistx5) (primitive = _mux(Q_tiex, Q_int[5], bist_x, Q_bistx5);)
    intern (Q_bistx6) (primitive = _mux(Q_tiex, Q_int[6], bist_x, Q_bistx6);)
    intern (Q_bistx7) (primitive = _mux(Q_tiex, Q_int[7], bist_x, Q_bistx7);)
    intern (Q_bistx8) (primitive = _mux(Q_tiex, Q_int[8], bist_x, Q_bistx8);)
  input (A) (array = 14 : 0;)
  input (D) (array = 8 : 0;)
  intern (BWEB) (array = 8 : 0;
    primitive = _tie0 ( BWEB[0] );
    primitive = _tie0 ( BWEB[1] );
    primitive = _tie0 ( BWEB[2] );
    primitive = _tie0 ( BWEB[3] );
    primitive = _tie0 ( BWEB[4] );
    primitive = _tie0 ( BWEB[5] );
    primitive = _tie0 ( BWEB[6] );
    primitive = _tie0 ( BWEB[7] );
    primitive = _tie0 ( BWEB[8] );
  )
  intern (BWEBM) (array = 8 : 0;
    primitive = _tie0 ( BWEBM[0] );
    primitive = _tie0 ( BWEBM[1] );
    primitive = _tie0 ( BWEBM[2] );
    primitive = _tie0 ( BWEBM[3] );
    primitive = _tie0 ( BWEBM[4] );
    primitive = _tie0 ( BWEBM[5] );
    primitive = _tie0 ( BWEBM[6] );
    primitive = _tie0 ( BWEBM[7] );
    primitive = _tie0 ( BWEBM[8] );
  )
  intern (AM) (array = 14 : 0;
    primitive = _buf ( A[0], AM[0] );
    primitive = _buf ( A[1], AM[1] );
    primitive = _buf ( A[2], AM[2] );
    primitive = _buf ( A[3], AM[3] );
    primitive = _buf ( A[4], AM[4] );
    primitive = _buf ( A[5], AM[5] );
    primitive = _buf ( A[6], AM[6] );
    primitive = _buf ( A[7], AM[7] );
    primitive = _buf ( A[8], AM[8] );
    primitive = _buf ( A[9], AM[9] );
    primitive = _buf ( A[10], AM[10] );
    primitive = _buf ( A[11], AM[11] );
    primitive = _buf ( A[12], AM[12] );
    primitive = _buf ( A[13], AM[13] );
    primitive = _buf ( A[14], AM[14] );
  )
  intern (DM) (array = 8 : 0;
    primitive = _buf ( D[0], DM[0] );
    primitive = _buf ( D[1], DM[1] );
    primitive = _buf ( D[2], DM[2] );
    primitive = _buf ( D[3], DM[3] );
    primitive = _buf ( D[4], DM[4] );
    primitive = _buf ( D[5], DM[5] );
    primitive = _buf ( D[6], DM[6] );
    primitive = _buf ( D[7], DM[7] );
    primitive = _buf ( D[8], DM[8] );
  )
  output (Q) (array = 8 : 0;
    primitive = _mux ( Q_bistx0, mlc_tiex, power_down, Q[0] );    
    primitive = _mux ( Q_bistx1, mlc_tiex, power_down, Q[1] );    
    primitive = _mux ( Q_bistx2, mlc_tiex, power_down, Q[2] );    
    primitive = _mux ( Q_bistx3, mlc_tiex, power_down, Q[3] );    
    primitive = _mux ( Q_bistx4, mlc_tiex, power_down, Q[4] );    
    primitive = _mux ( Q_bistx5, mlc_tiex, power_down, Q[5] );    
    primitive = _mux ( Q_bistx6, mlc_tiex, power_down, Q[6] );    
    primitive = _mux ( Q_bistx7, mlc_tiex, power_down, Q[7] );    
    primitive = _mux ( Q_bistx8, mlc_tiex, power_down, Q[8] );    
  )
)
