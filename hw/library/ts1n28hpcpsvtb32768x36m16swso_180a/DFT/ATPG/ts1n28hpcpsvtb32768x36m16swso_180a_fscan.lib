//*#*********************************************************************************************************************/
//*# Software       : TSMC MEMORY COMPILER tsn28hpcpd127spsram_2012.02.00.d.180a						*/
//*# Technology     : TSMC 28nm CMOS LOGIC High Performance Compact Mobile Computing Plus 1P10M HKMG CU_ELK 0.9V				*/
//*#  Memory Type    : TSMC 28nm High Performance Compact Mobile Computing Plus Single Port SRAM with d127 bit cell SVT periphery */
//*# Library Name   : ts1n28hpcpsvtb32768x36m16swso (user specify : TS1N28HPCPSVTB32768X36M16SWSO)				*/
//*# Library Version: 180a												*/
//*# Generated Time : 2024/05/13, 17:41:17										*/
//*#*********************************************************************************************************************/
//*#															*/
//*# STATEMENT OF USE													*/
//*#															*/
//*# This information contains confidential and proprietary information of TSMC.					*/
//*# No part of this information may be reproduced, transmitted, transcribed,						*/
//*# stored in a retrieval system, or translated into any human or computer						*/
//*# language, in any form or by any means, electronic, mechanical, magnetic,						*/
//*# optical, chemical, manual, or otherwise, without the prior written permission					*/
//*# of TSMC. This information was prepared for informational purpose and is for					*/
//*# use by TSMC's customers only. TSMC reserves the right to make changes in the					*/
//*# information at any time and without notice.									*/
//*#															*/
//*#*********************************************************************************************************************/
//* Template Version : S_04_41401                                               */
//****************************************************************************** */
array_delimiter = "[]";

model TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit(SD_i, SLP_i, AWT_i, CLK_i, CEB_i, WEB_i, BWEB_i, A_i, D_i, Q_i)
(
  model_source = verilog_module;
  input (SD_i) ( )
  input (SLP_i) ( )
  input (AWT_i) ( )
  input (CLK_i) ( )
  input (CEB_i) ( )
  input (WEB_i) ( )
  input (BWEB_i) ( )
  input (D_i) ( )
  input (A_i) (array = 14 : 0;)
  intern (WB) ( primitive = _nor ( WEB_i, CEB_i, BWEB_i, SD_i, SLP_i, WB );)
  intern (RB) (
    primitive = _inv ( WEB_i, WEB_n );
    primitive = _nor ( WEB_n, CEB_i, SD_i, SLP_i, AWT_i, RB );
  )
  output (Q_i) (  
    data_size = 1;
    address_size = 15;
    min_address = 0;
    max_address = 32767;
    edge_trigger = rw; //  EDGE TRIGGERED read ports and write ports
    
    // Verilog RAM has no Set or Reset pin : 
    primitive = _cram ( , ,
      // Following write port will Hold in-memory data when not writing.
      _write{,,}     (   CLK_i, WB, A_i, D_i),
      // Following read port will Hold output data after reading.
      _read {,H,H,H} ( , CLK_i, RB, A_i, Q_i)
    );    
  )
)


model TS1N28HPCPSVTB32768X36M16SWSO (
            SLP,
            SD,
            CLK, CEB, WEB,
            A, D, 
            BWEB, 
            Q
            )

(
  model_source = verilog_module;
  input (CLK) ()
  input (WEB) ()
  input (CEB) ()      
  input (SLP)   ()
  input (SD) ()
  intern (AWT) ( primitive = _tie0 ( AWT );)
  intern (bist_x)  (primitive = _tie1(bist_x);)
  intern (Q_tiex)  (primitive = _tiex(Q_tiex);)
  intern (WEBM) ( primitive = _buf ( WEB, WEBM );)
  intern (CEBM) ( primitive = _buf ( CEB, CEBM );)      
  intern (BIST) ( primitive = _tie0 ( BIST );)      
  intern (mlc_tiex) ( primitive = _tiex ( mlc_tiex );)
  intern (power_down) ( primitive = _or ( SD, SLP, power_down );)
  intern (iCEB) ( primitive = _mux ( CEB, CEBM, BIST, iCEB );)
  intern (iWEB) ( primitive = _mux ( WEB, WEBM, BIST, iWEB );)
  intern (iBWEB) (array = 35 : 0;
    primitive = _mux ( BWEB[0], BWEBM[0], BIST, iBWEB[0] );
    primitive = _mux ( BWEB[1], BWEBM[1], BIST, iBWEB[1] );
    primitive = _mux ( BWEB[2], BWEBM[2], BIST, iBWEB[2] );
    primitive = _mux ( BWEB[3], BWEBM[3], BIST, iBWEB[3] );
    primitive = _mux ( BWEB[4], BWEBM[4], BIST, iBWEB[4] );
    primitive = _mux ( BWEB[5], BWEBM[5], BIST, iBWEB[5] );
    primitive = _mux ( BWEB[6], BWEBM[6], BIST, iBWEB[6] );
    primitive = _mux ( BWEB[7], BWEBM[7], BIST, iBWEB[7] );
    primitive = _mux ( BWEB[8], BWEBM[8], BIST, iBWEB[8] );
    primitive = _mux ( BWEB[9], BWEBM[9], BIST, iBWEB[9] );
    primitive = _mux ( BWEB[10], BWEBM[10], BIST, iBWEB[10] );
    primitive = _mux ( BWEB[11], BWEBM[11], BIST, iBWEB[11] );
    primitive = _mux ( BWEB[12], BWEBM[12], BIST, iBWEB[12] );
    primitive = _mux ( BWEB[13], BWEBM[13], BIST, iBWEB[13] );
    primitive = _mux ( BWEB[14], BWEBM[14], BIST, iBWEB[14] );
    primitive = _mux ( BWEB[15], BWEBM[15], BIST, iBWEB[15] );
    primitive = _mux ( BWEB[16], BWEBM[16], BIST, iBWEB[16] );
    primitive = _mux ( BWEB[17], BWEBM[17], BIST, iBWEB[17] );
    primitive = _mux ( BWEB[18], BWEBM[18], BIST, iBWEB[18] );
    primitive = _mux ( BWEB[19], BWEBM[19], BIST, iBWEB[19] );
    primitive = _mux ( BWEB[20], BWEBM[20], BIST, iBWEB[20] );
    primitive = _mux ( BWEB[21], BWEBM[21], BIST, iBWEB[21] );
    primitive = _mux ( BWEB[22], BWEBM[22], BIST, iBWEB[22] );
    primitive = _mux ( BWEB[23], BWEBM[23], BIST, iBWEB[23] );
    primitive = _mux ( BWEB[24], BWEBM[24], BIST, iBWEB[24] );
    primitive = _mux ( BWEB[25], BWEBM[25], BIST, iBWEB[25] );
    primitive = _mux ( BWEB[26], BWEBM[26], BIST, iBWEB[26] );
    primitive = _mux ( BWEB[27], BWEBM[27], BIST, iBWEB[27] );
    primitive = _mux ( BWEB[28], BWEBM[28], BIST, iBWEB[28] );
    primitive = _mux ( BWEB[29], BWEBM[29], BIST, iBWEB[29] );
    primitive = _mux ( BWEB[30], BWEBM[30], BIST, iBWEB[30] );
    primitive = _mux ( BWEB[31], BWEBM[31], BIST, iBWEB[31] );
    primitive = _mux ( BWEB[32], BWEBM[32], BIST, iBWEB[32] );
    primitive = _mux ( BWEB[33], BWEBM[33], BIST, iBWEB[33] );
    primitive = _mux ( BWEB[34], BWEBM[34], BIST, iBWEB[34] );
    primitive = _mux ( BWEB[35], BWEBM[35], BIST, iBWEB[35] );
  )
  intern (iD) (array = 35 : 0;
    primitive = _mux ( D[0], DM[0], BIST, iD[0] );
    primitive = _mux ( D[1], DM[1], BIST, iD[1] );
    primitive = _mux ( D[2], DM[2], BIST, iD[2] );
    primitive = _mux ( D[3], DM[3], BIST, iD[3] );
    primitive = _mux ( D[4], DM[4], BIST, iD[4] );
    primitive = _mux ( D[5], DM[5], BIST, iD[5] );
    primitive = _mux ( D[6], DM[6], BIST, iD[6] );
    primitive = _mux ( D[7], DM[7], BIST, iD[7] );
    primitive = _mux ( D[8], DM[8], BIST, iD[8] );
    primitive = _mux ( D[9], DM[9], BIST, iD[9] );
    primitive = _mux ( D[10], DM[10], BIST, iD[10] );
    primitive = _mux ( D[11], DM[11], BIST, iD[11] );
    primitive = _mux ( D[12], DM[12], BIST, iD[12] );
    primitive = _mux ( D[13], DM[13], BIST, iD[13] );
    primitive = _mux ( D[14], DM[14], BIST, iD[14] );
    primitive = _mux ( D[15], DM[15], BIST, iD[15] );
    primitive = _mux ( D[16], DM[16], BIST, iD[16] );
    primitive = _mux ( D[17], DM[17], BIST, iD[17] );
    primitive = _mux ( D[18], DM[18], BIST, iD[18] );
    primitive = _mux ( D[19], DM[19], BIST, iD[19] );
    primitive = _mux ( D[20], DM[20], BIST, iD[20] );
    primitive = _mux ( D[21], DM[21], BIST, iD[21] );
    primitive = _mux ( D[22], DM[22], BIST, iD[22] );
    primitive = _mux ( D[23], DM[23], BIST, iD[23] );
    primitive = _mux ( D[24], DM[24], BIST, iD[24] );
    primitive = _mux ( D[25], DM[25], BIST, iD[25] );
    primitive = _mux ( D[26], DM[26], BIST, iD[26] );
    primitive = _mux ( D[27], DM[27], BIST, iD[27] );
    primitive = _mux ( D[28], DM[28], BIST, iD[28] );
    primitive = _mux ( D[29], DM[29], BIST, iD[29] );
    primitive = _mux ( D[30], DM[30], BIST, iD[30] );
    primitive = _mux ( D[31], DM[31], BIST, iD[31] );
    primitive = _mux ( D[32], DM[32], BIST, iD[32] );
    primitive = _mux ( D[33], DM[33], BIST, iD[33] );
    primitive = _mux ( D[34], DM[34], BIST, iD[34] );
    primitive = _mux ( D[35], DM[35], BIST, iD[35] );
  )
  intern (iA) (array = 14 : 0;
    primitive = _mux ( A[0], AM[0], BIST, iA[0] );
    primitive = _mux ( A[1], AM[1], BIST, iA[1] );
    primitive = _mux ( A[2], AM[2], BIST, iA[2] );
    primitive = _mux ( A[3], AM[3], BIST, iA[3] );
    primitive = _mux ( A[4], AM[4], BIST, iA[4] );
    primitive = _mux ( A[5], AM[5], BIST, iA[5] );
    primitive = _mux ( A[6], AM[6], BIST, iA[6] );
    primitive = _mux ( A[7], AM[7], BIST, iA[7] );
    primitive = _mux ( A[8], AM[8], BIST, iA[8] );
    primitive = _mux ( A[9], AM[9], BIST, iA[9] );
    primitive = _mux ( A[10], AM[10], BIST, iA[10] );
    primitive = _mux ( A[11], AM[11], BIST, iA[11] );
    primitive = _mux ( A[12], AM[12], BIST, iA[12] );
    primitive = _mux ( A[13], AM[13], BIST, iA[13] );
    primitive = _mux ( A[14], AM[14], BIST, iA[14] );
  )
  intern (Q_awt) (array = 35 : 0;
    primitive = _xor ( iD[0], iBWEB[0], Q_awt[0] );    
    primitive = _xor ( iD[1], iBWEB[1], Q_awt[1] );    
    primitive = _xor ( iD[2], iBWEB[2], Q_awt[2] );    
    primitive = _xor ( iD[3], iBWEB[3], Q_awt[3] );    
    primitive = _xor ( iD[4], iBWEB[4], Q_awt[4] );    
    primitive = _xor ( iD[5], iBWEB[5], Q_awt[5] );    
    primitive = _xor ( iD[6], iBWEB[6], Q_awt[6] );    
    primitive = _xor ( iD[7], iBWEB[7], Q_awt[7] );    
    primitive = _xor ( iD[8], iBWEB[8], Q_awt[8] );    
    primitive = _xor ( iD[9], iBWEB[9], Q_awt[9] );    
    primitive = _xor ( iD[10], iBWEB[10], Q_awt[10] );    
    primitive = _xor ( iD[11], iBWEB[11], Q_awt[11] );    
    primitive = _xor ( iD[12], iBWEB[12], Q_awt[12] );    
    primitive = _xor ( iD[13], iBWEB[13], Q_awt[13] );    
    primitive = _xor ( iD[14], iBWEB[14], Q_awt[14] );    
    primitive = _xor ( iD[15], iBWEB[15], Q_awt[15] );    
    primitive = _xor ( iD[16], iBWEB[16], Q_awt[16] );    
    primitive = _xor ( iD[17], iBWEB[17], Q_awt[17] );    
    primitive = _xor ( iD[18], iBWEB[18], Q_awt[18] );    
    primitive = _xor ( iD[19], iBWEB[19], Q_awt[19] );    
    primitive = _xor ( iD[20], iBWEB[20], Q_awt[20] );    
    primitive = _xor ( iD[21], iBWEB[21], Q_awt[21] );    
    primitive = _xor ( iD[22], iBWEB[22], Q_awt[22] );    
    primitive = _xor ( iD[23], iBWEB[23], Q_awt[23] );    
    primitive = _xor ( iD[24], iBWEB[24], Q_awt[24] );    
    primitive = _xor ( iD[25], iBWEB[25], Q_awt[25] );    
    primitive = _xor ( iD[26], iBWEB[26], Q_awt[26] );    
    primitive = _xor ( iD[27], iBWEB[27], Q_awt[27] );    
    primitive = _xor ( iD[28], iBWEB[28], Q_awt[28] );    
    primitive = _xor ( iD[29], iBWEB[29], Q_awt[29] );    
    primitive = _xor ( iD[30], iBWEB[30], Q_awt[30] );    
    primitive = _xor ( iD[31], iBWEB[31], Q_awt[31] );    
    primitive = _xor ( iD[32], iBWEB[32], Q_awt[32] );    
    primitive = _xor ( iD[33], iBWEB[33], Q_awt[33] );    
    primitive = _xor ( iD[34], iBWEB[34], Q_awt[34] );    
    primitive = _xor ( iD[35], iBWEB[35], Q_awt[35] );    
  )
  intern (Q_int) (array = 35 : 0;
    primitive = _mux ( Q_1bit[0], Q_awt[0], AWT, Q_int[0] );
    primitive = _mux ( Q_1bit[1], Q_awt[1], AWT, Q_int[1] );
    primitive = _mux ( Q_1bit[2], Q_awt[2], AWT, Q_int[2] );
    primitive = _mux ( Q_1bit[3], Q_awt[3], AWT, Q_int[3] );
    primitive = _mux ( Q_1bit[4], Q_awt[4], AWT, Q_int[4] );
    primitive = _mux ( Q_1bit[5], Q_awt[5], AWT, Q_int[5] );
    primitive = _mux ( Q_1bit[6], Q_awt[6], AWT, Q_int[6] );
    primitive = _mux ( Q_1bit[7], Q_awt[7], AWT, Q_int[7] );
    primitive = _mux ( Q_1bit[8], Q_awt[8], AWT, Q_int[8] );
    primitive = _mux ( Q_1bit[9], Q_awt[9], AWT, Q_int[9] );
    primitive = _mux ( Q_1bit[10], Q_awt[10], AWT, Q_int[10] );
    primitive = _mux ( Q_1bit[11], Q_awt[11], AWT, Q_int[11] );
    primitive = _mux ( Q_1bit[12], Q_awt[12], AWT, Q_int[12] );
    primitive = _mux ( Q_1bit[13], Q_awt[13], AWT, Q_int[13] );
    primitive = _mux ( Q_1bit[14], Q_awt[14], AWT, Q_int[14] );
    primitive = _mux ( Q_1bit[15], Q_awt[15], AWT, Q_int[15] );
    primitive = _mux ( Q_1bit[16], Q_awt[16], AWT, Q_int[16] );
    primitive = _mux ( Q_1bit[17], Q_awt[17], AWT, Q_int[17] );
    primitive = _mux ( Q_1bit[18], Q_awt[18], AWT, Q_int[18] );
    primitive = _mux ( Q_1bit[19], Q_awt[19], AWT, Q_int[19] );
    primitive = _mux ( Q_1bit[20], Q_awt[20], AWT, Q_int[20] );
    primitive = _mux ( Q_1bit[21], Q_awt[21], AWT, Q_int[21] );
    primitive = _mux ( Q_1bit[22], Q_awt[22], AWT, Q_int[22] );
    primitive = _mux ( Q_1bit[23], Q_awt[23], AWT, Q_int[23] );
    primitive = _mux ( Q_1bit[24], Q_awt[24], AWT, Q_int[24] );
    primitive = _mux ( Q_1bit[25], Q_awt[25], AWT, Q_int[25] );
    primitive = _mux ( Q_1bit[26], Q_awt[26], AWT, Q_int[26] );
    primitive = _mux ( Q_1bit[27], Q_awt[27], AWT, Q_int[27] );
    primitive = _mux ( Q_1bit[28], Q_awt[28], AWT, Q_int[28] );
    primitive = _mux ( Q_1bit[29], Q_awt[29], AWT, Q_int[29] );
    primitive = _mux ( Q_1bit[30], Q_awt[30], AWT, Q_int[30] );
    primitive = _mux ( Q_1bit[31], Q_awt[31], AWT, Q_int[31] );
    primitive = _mux ( Q_1bit[32], Q_awt[32], AWT, Q_int[32] );
    primitive = _mux ( Q_1bit[33], Q_awt[33], AWT, Q_int[33] );
    primitive = _mux ( Q_1bit[34], Q_awt[34], AWT, Q_int[34] );
    primitive = _mux ( Q_1bit[35], Q_awt[35], AWT, Q_int[35] );
  )
  intern (Q_1bit) (array = 35 : 0;
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[0]), .A_i(iA), .D_i(iD[0]), .Q_i(Q_1bit[0])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[1]), .A_i(iA), .D_i(iD[1]), .Q_i(Q_1bit[1])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[2]), .A_i(iA), .D_i(iD[2]), .Q_i(Q_1bit[2])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[3]), .A_i(iA), .D_i(iD[3]), .Q_i(Q_1bit[3])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[4]), .A_i(iA), .D_i(iD[4]), .Q_i(Q_1bit[4])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[5]), .A_i(iA), .D_i(iD[5]), .Q_i(Q_1bit[5])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[6]), .A_i(iA), .D_i(iD[6]), .Q_i(Q_1bit[6])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[7]), .A_i(iA), .D_i(iD[7]), .Q_i(Q_1bit[7])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[8]), .A_i(iA), .D_i(iD[8]), .Q_i(Q_1bit[8])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[9]), .A_i(iA), .D_i(iD[9]), .Q_i(Q_1bit[9])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[10]), .A_i(iA), .D_i(iD[10]), .Q_i(Q_1bit[10])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[11]), .A_i(iA), .D_i(iD[11]), .Q_i(Q_1bit[11])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[12]), .A_i(iA), .D_i(iD[12]), .Q_i(Q_1bit[12])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[13]), .A_i(iA), .D_i(iD[13]), .Q_i(Q_1bit[13])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[14]), .A_i(iA), .D_i(iD[14]), .Q_i(Q_1bit[14])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[15]), .A_i(iA), .D_i(iD[15]), .Q_i(Q_1bit[15])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[16]), .A_i(iA), .D_i(iD[16]), .Q_i(Q_1bit[16])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[17]), .A_i(iA), .D_i(iD[17]), .Q_i(Q_1bit[17])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[18]), .A_i(iA), .D_i(iD[18]), .Q_i(Q_1bit[18])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[19]), .A_i(iA), .D_i(iD[19]), .Q_i(Q_1bit[19])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[20]), .A_i(iA), .D_i(iD[20]), .Q_i(Q_1bit[20])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[21]), .A_i(iA), .D_i(iD[21]), .Q_i(Q_1bit[21])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[22]), .A_i(iA), .D_i(iD[22]), .Q_i(Q_1bit[22])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[23]), .A_i(iA), .D_i(iD[23]), .Q_i(Q_1bit[23])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[24]), .A_i(iA), .D_i(iD[24]), .Q_i(Q_1bit[24])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[25]), .A_i(iA), .D_i(iD[25]), .Q_i(Q_1bit[25])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[26]), .A_i(iA), .D_i(iD[26]), .Q_i(Q_1bit[26])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[27]), .A_i(iA), .D_i(iD[27]), .Q_i(Q_1bit[27])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[28]), .A_i(iA), .D_i(iD[28]), .Q_i(Q_1bit[28])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[29]), .A_i(iA), .D_i(iD[29]), .Q_i(Q_1bit[29])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[30]), .A_i(iA), .D_i(iD[30]), .Q_i(Q_1bit[30])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[31]), .A_i(iA), .D_i(iD[31]), .Q_i(Q_1bit[31])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[32]), .A_i(iA), .D_i(iD[32]), .Q_i(Q_1bit[32])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[33]), .A_i(iA), .D_i(iD[33]), .Q_i(Q_1bit[33])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[34]), .A_i(iA), .D_i(iD[34]), .Q_i(Q_1bit[34])
    );
    instance = TS1N28HPCPSVTB32768X36M16SWSO_RAM_1bit (
      .SD_i(SD), .SLP_i(SLP), .AWT_i(AWT), .CLK_i(CLK), .CEB_i(iCEB), .WEB_i(iWEB), .BWEB_i(iBWEB[35]), .A_i(iA), .D_i(iD[35]), .Q_i(Q_1bit[35])
    );
  )
    intern (Q_bistx0) (primitive = _mux(Q_tiex, Q_int[0], bist_x, Q_bistx0);)
    intern (Q_bistx1) (primitive = _mux(Q_tiex, Q_int[1], bist_x, Q_bistx1);)
    intern (Q_bistx2) (primitive = _mux(Q_tiex, Q_int[2], bist_x, Q_bistx2);)
    intern (Q_bistx3) (primitive = _mux(Q_tiex, Q_int[3], bist_x, Q_bistx3);)
    intern (Q_bistx4) (primitive = _mux(Q_tiex, Q_int[4], bist_x, Q_bistx4);)
    intern (Q_bistx5) (primitive = _mux(Q_tiex, Q_int[5], bist_x, Q_bistx5);)
    intern (Q_bistx6) (primitive = _mux(Q_tiex, Q_int[6], bist_x, Q_bistx6);)
    intern (Q_bistx7) (primitive = _mux(Q_tiex, Q_int[7], bist_x, Q_bistx7);)
    intern (Q_bistx8) (primitive = _mux(Q_tiex, Q_int[8], bist_x, Q_bistx8);)
    intern (Q_bistx9) (primitive = _mux(Q_tiex, Q_int[9], bist_x, Q_bistx9);)
    intern (Q_bistx10) (primitive = _mux(Q_tiex, Q_int[10], bist_x, Q_bistx10);)
    intern (Q_bistx11) (primitive = _mux(Q_tiex, Q_int[11], bist_x, Q_bistx11);)
    intern (Q_bistx12) (primitive = _mux(Q_tiex, Q_int[12], bist_x, Q_bistx12);)
    intern (Q_bistx13) (primitive = _mux(Q_tiex, Q_int[13], bist_x, Q_bistx13);)
    intern (Q_bistx14) (primitive = _mux(Q_tiex, Q_int[14], bist_x, Q_bistx14);)
    intern (Q_bistx15) (primitive = _mux(Q_tiex, Q_int[15], bist_x, Q_bistx15);)
    intern (Q_bistx16) (primitive = _mux(Q_tiex, Q_int[16], bist_x, Q_bistx16);)
    intern (Q_bistx17) (primitive = _mux(Q_tiex, Q_int[17], bist_x, Q_bistx17);)
    intern (Q_bistx18) (primitive = _mux(Q_tiex, Q_int[18], bist_x, Q_bistx18);)
    intern (Q_bistx19) (primitive = _mux(Q_tiex, Q_int[19], bist_x, Q_bistx19);)
    intern (Q_bistx20) (primitive = _mux(Q_tiex, Q_int[20], bist_x, Q_bistx20);)
    intern (Q_bistx21) (primitive = _mux(Q_tiex, Q_int[21], bist_x, Q_bistx21);)
    intern (Q_bistx22) (primitive = _mux(Q_tiex, Q_int[22], bist_x, Q_bistx22);)
    intern (Q_bistx23) (primitive = _mux(Q_tiex, Q_int[23], bist_x, Q_bistx23);)
    intern (Q_bistx24) (primitive = _mux(Q_tiex, Q_int[24], bist_x, Q_bistx24);)
    intern (Q_bistx25) (primitive = _mux(Q_tiex, Q_int[25], bist_x, Q_bistx25);)
    intern (Q_bistx26) (primitive = _mux(Q_tiex, Q_int[26], bist_x, Q_bistx26);)
    intern (Q_bistx27) (primitive = _mux(Q_tiex, Q_int[27], bist_x, Q_bistx27);)
    intern (Q_bistx28) (primitive = _mux(Q_tiex, Q_int[28], bist_x, Q_bistx28);)
    intern (Q_bistx29) (primitive = _mux(Q_tiex, Q_int[29], bist_x, Q_bistx29);)
    intern (Q_bistx30) (primitive = _mux(Q_tiex, Q_int[30], bist_x, Q_bistx30);)
    intern (Q_bistx31) (primitive = _mux(Q_tiex, Q_int[31], bist_x, Q_bistx31);)
    intern (Q_bistx32) (primitive = _mux(Q_tiex, Q_int[32], bist_x, Q_bistx32);)
    intern (Q_bistx33) (primitive = _mux(Q_tiex, Q_int[33], bist_x, Q_bistx33);)
    intern (Q_bistx34) (primitive = _mux(Q_tiex, Q_int[34], bist_x, Q_bistx34);)
    intern (Q_bistx35) (primitive = _mux(Q_tiex, Q_int[35], bist_x, Q_bistx35);)
  input (A) (array = 14 : 0;)
  input (D) (array = 35 : 0;)
  input (BWEB) (array = 35 : 0;)
  intern (AM) (array = 14 : 0;
    primitive = _buf ( A[0], AM[0] );
    primitive = _buf ( A[1], AM[1] );
    primitive = _buf ( A[2], AM[2] );
    primitive = _buf ( A[3], AM[3] );
    primitive = _buf ( A[4], AM[4] );
    primitive = _buf ( A[5], AM[5] );
    primitive = _buf ( A[6], AM[6] );
    primitive = _buf ( A[7], AM[7] );
    primitive = _buf ( A[8], AM[8] );
    primitive = _buf ( A[9], AM[9] );
    primitive = _buf ( A[10], AM[10] );
    primitive = _buf ( A[11], AM[11] );
    primitive = _buf ( A[12], AM[12] );
    primitive = _buf ( A[13], AM[13] );
    primitive = _buf ( A[14], AM[14] );
  )
  intern (DM) (array = 35 : 0;
    primitive = _buf ( D[0], DM[0] );
    primitive = _buf ( D[1], DM[1] );
    primitive = _buf ( D[2], DM[2] );
    primitive = _buf ( D[3], DM[3] );
    primitive = _buf ( D[4], DM[4] );
    primitive = _buf ( D[5], DM[5] );
    primitive = _buf ( D[6], DM[6] );
    primitive = _buf ( D[7], DM[7] );
    primitive = _buf ( D[8], DM[8] );
    primitive = _buf ( D[9], DM[9] );
    primitive = _buf ( D[10], DM[10] );
    primitive = _buf ( D[11], DM[11] );
    primitive = _buf ( D[12], DM[12] );
    primitive = _buf ( D[13], DM[13] );
    primitive = _buf ( D[14], DM[14] );
    primitive = _buf ( D[15], DM[15] );
    primitive = _buf ( D[16], DM[16] );
    primitive = _buf ( D[17], DM[17] );
    primitive = _buf ( D[18], DM[18] );
    primitive = _buf ( D[19], DM[19] );
    primitive = _buf ( D[20], DM[20] );
    primitive = _buf ( D[21], DM[21] );
    primitive = _buf ( D[22], DM[22] );
    primitive = _buf ( D[23], DM[23] );
    primitive = _buf ( D[24], DM[24] );
    primitive = _buf ( D[25], DM[25] );
    primitive = _buf ( D[26], DM[26] );
    primitive = _buf ( D[27], DM[27] );
    primitive = _buf ( D[28], DM[28] );
    primitive = _buf ( D[29], DM[29] );
    primitive = _buf ( D[30], DM[30] );
    primitive = _buf ( D[31], DM[31] );
    primitive = _buf ( D[32], DM[32] );
    primitive = _buf ( D[33], DM[33] );
    primitive = _buf ( D[34], DM[34] );
    primitive = _buf ( D[35], DM[35] );
  )
  intern (BWEBM) (array = 35 : 0;
    primitive = _buf ( BWEB[0], BWEBM[0] );
    primitive = _buf ( BWEB[1], BWEBM[1] );
    primitive = _buf ( BWEB[2], BWEBM[2] );
    primitive = _buf ( BWEB[3], BWEBM[3] );
    primitive = _buf ( BWEB[4], BWEBM[4] );
    primitive = _buf ( BWEB[5], BWEBM[5] );
    primitive = _buf ( BWEB[6], BWEBM[6] );
    primitive = _buf ( BWEB[7], BWEBM[7] );
    primitive = _buf ( BWEB[8], BWEBM[8] );
    primitive = _buf ( BWEB[9], BWEBM[9] );
    primitive = _buf ( BWEB[10], BWEBM[10] );
    primitive = _buf ( BWEB[11], BWEBM[11] );
    primitive = _buf ( BWEB[12], BWEBM[12] );
    primitive = _buf ( BWEB[13], BWEBM[13] );
    primitive = _buf ( BWEB[14], BWEBM[14] );
    primitive = _buf ( BWEB[15], BWEBM[15] );
    primitive = _buf ( BWEB[16], BWEBM[16] );
    primitive = _buf ( BWEB[17], BWEBM[17] );
    primitive = _buf ( BWEB[18], BWEBM[18] );
    primitive = _buf ( BWEB[19], BWEBM[19] );
    primitive = _buf ( BWEB[20], BWEBM[20] );
    primitive = _buf ( BWEB[21], BWEBM[21] );
    primitive = _buf ( BWEB[22], BWEBM[22] );
    primitive = _buf ( BWEB[23], BWEBM[23] );
    primitive = _buf ( BWEB[24], BWEBM[24] );
    primitive = _buf ( BWEB[25], BWEBM[25] );
    primitive = _buf ( BWEB[26], BWEBM[26] );
    primitive = _buf ( BWEB[27], BWEBM[27] );
    primitive = _buf ( BWEB[28], BWEBM[28] );
    primitive = _buf ( BWEB[29], BWEBM[29] );
    primitive = _buf ( BWEB[30], BWEBM[30] );
    primitive = _buf ( BWEB[31], BWEBM[31] );
    primitive = _buf ( BWEB[32], BWEBM[32] );
    primitive = _buf ( BWEB[33], BWEBM[33] );
    primitive = _buf ( BWEB[34], BWEBM[34] );
    primitive = _buf ( BWEB[35], BWEBM[35] );
  ) 
  output (Q) (array = 35 : 0;
    primitive = _mux ( Q_bistx0, mlc_tiex, power_down, Q[0] );    
    primitive = _mux ( Q_bistx1, mlc_tiex, power_down, Q[1] );    
    primitive = _mux ( Q_bistx2, mlc_tiex, power_down, Q[2] );    
    primitive = _mux ( Q_bistx3, mlc_tiex, power_down, Q[3] );    
    primitive = _mux ( Q_bistx4, mlc_tiex, power_down, Q[4] );    
    primitive = _mux ( Q_bistx5, mlc_tiex, power_down, Q[5] );    
    primitive = _mux ( Q_bistx6, mlc_tiex, power_down, Q[6] );    
    primitive = _mux ( Q_bistx7, mlc_tiex, power_down, Q[7] );    
    primitive = _mux ( Q_bistx8, mlc_tiex, power_down, Q[8] );    
    primitive = _mux ( Q_bistx9, mlc_tiex, power_down, Q[9] );    
    primitive = _mux ( Q_bistx10, mlc_tiex, power_down, Q[10] );    
    primitive = _mux ( Q_bistx11, mlc_tiex, power_down, Q[11] );    
    primitive = _mux ( Q_bistx12, mlc_tiex, power_down, Q[12] );    
    primitive = _mux ( Q_bistx13, mlc_tiex, power_down, Q[13] );    
    primitive = _mux ( Q_bistx14, mlc_tiex, power_down, Q[14] );    
    primitive = _mux ( Q_bistx15, mlc_tiex, power_down, Q[15] );    
    primitive = _mux ( Q_bistx16, mlc_tiex, power_down, Q[16] );    
    primitive = _mux ( Q_bistx17, mlc_tiex, power_down, Q[17] );    
    primitive = _mux ( Q_bistx18, mlc_tiex, power_down, Q[18] );    
    primitive = _mux ( Q_bistx19, mlc_tiex, power_down, Q[19] );    
    primitive = _mux ( Q_bistx20, mlc_tiex, power_down, Q[20] );    
    primitive = _mux ( Q_bistx21, mlc_tiex, power_down, Q[21] );    
    primitive = _mux ( Q_bistx22, mlc_tiex, power_down, Q[22] );    
    primitive = _mux ( Q_bistx23, mlc_tiex, power_down, Q[23] );    
    primitive = _mux ( Q_bistx24, mlc_tiex, power_down, Q[24] );    
    primitive = _mux ( Q_bistx25, mlc_tiex, power_down, Q[25] );    
    primitive = _mux ( Q_bistx26, mlc_tiex, power_down, Q[26] );    
    primitive = _mux ( Q_bistx27, mlc_tiex, power_down, Q[27] );    
    primitive = _mux ( Q_bistx28, mlc_tiex, power_down, Q[28] );    
    primitive = _mux ( Q_bistx29, mlc_tiex, power_down, Q[29] );    
    primitive = _mux ( Q_bistx30, mlc_tiex, power_down, Q[30] );    
    primitive = _mux ( Q_bistx31, mlc_tiex, power_down, Q[31] );    
    primitive = _mux ( Q_bistx32, mlc_tiex, power_down, Q[32] );    
    primitive = _mux ( Q_bistx33, mlc_tiex, power_down, Q[33] );    
    primitive = _mux ( Q_bistx34, mlc_tiex, power_down, Q[34] );    
    primitive = _mux ( Q_bistx35, mlc_tiex, power_down, Q[35] );    
  )
)
